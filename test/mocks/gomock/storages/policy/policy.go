// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go
//
// Generated by this command:
//
//	mockgen -source=policy.go -destination=../../../test/mocks/gomock/storages/policy/policy.go
//
// Package mock_policy is a generated GoMock package.
package mock_policy

import (
	keeneticdto "keeneticToMqtt/internal/dto/keeneticdto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockpolicyClient is a mock of policyClient interface.
type MockpolicyClient struct {
	ctrl     *gomock.Controller
	recorder *MockpolicyClientMockRecorder
}

// MockpolicyClientMockRecorder is the mock recorder for MockpolicyClient.
type MockpolicyClientMockRecorder struct {
	mock *MockpolicyClient
}

// NewMockpolicyClient creates a new mock instance.
func NewMockpolicyClient(ctrl *gomock.Controller) *MockpolicyClient {
	mock := &MockpolicyClient{ctrl: ctrl}
	mock.recorder = &MockpolicyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpolicyClient) EXPECT() *MockpolicyClientMockRecorder {
	return m.recorder
}

// GetPolicyList mocks base method.
func (m *MockpolicyClient) GetPolicyList() (map[string]keeneticdto.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyList")
	ret0, _ := ret[0].(map[string]keeneticdto.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyList indicates an expected call of GetPolicyList.
func (mr *MockpolicyClientMockRecorder) GetPolicyList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyList", reflect.TypeOf((*MockpolicyClient)(nil).GetPolicyList))
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *Mocklogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), varargs...)
}

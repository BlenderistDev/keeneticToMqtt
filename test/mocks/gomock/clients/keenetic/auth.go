// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=../../../test/mocks/gomock/clients/keenetic/auth.go
//
// Package mock_keenetic is a generated GoMock package.
package mock_keenetic

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockroundTripper is a mock of roundTripper interface.
type MockroundTripper struct {
	ctrl     *gomock.Controller
	recorder *MockroundTripperMockRecorder
}

// MockroundTripperMockRecorder is the mock recorder for MockroundTripper.
type MockroundTripperMockRecorder struct {
	mock *MockroundTripper
}

// NewMockroundTripper creates a new mock instance.
func NewMockroundTripper(ctrl *gomock.Controller) *MockroundTripper {
	mock := &MockroundTripper{ctrl: ctrl}
	mock.recorder = &MockroundTripperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockroundTripper) EXPECT() *MockroundTripperMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *MockroundTripper) RoundTrip(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockroundTripperMockRecorder) RoundTrip(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockroundTripper)(nil).RoundTrip), arg0)
}

// MockauthClient is a mock of authClient interface.
type MockauthClient struct {
	ctrl     *gomock.Controller
	recorder *MockauthClientMockRecorder
}

// MockauthClientMockRecorder is the mock recorder for MockauthClient.
type MockauthClientMockRecorder struct {
	mock *MockauthClient
}

// NewMockauthClient creates a new mock instance.
func NewMockauthClient(ctrl *gomock.Controller) *MockauthClient {
	mock := &MockauthClient{ctrl: ctrl}
	mock.recorder = &MockauthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthClient) EXPECT() *MockauthClientMockRecorder {
	return m.recorder
}

// RefreshAuth mocks base method.
func (m *MockauthClient) RefreshAuth() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAuth")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAuth indicates an expected call of RefreshAuth.
func (mr *MockauthClientMockRecorder) RefreshAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAuth", reflect.TypeOf((*MockauthClient)(nil).RefreshAuth))
}

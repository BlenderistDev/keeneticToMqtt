// Code generated by MockGen. DO NOT EDIT.
// Source: entitymanager.go
//
// Generated by this command:
//
//	mockgen -source=entitymanager.go -destination=../../test/mocks/gomock/homeassistant/entitymanager.go
//
// Package mock_homeassistant is a generated GoMock package.
package mock_homeassistant

import (
	dto "keeneticToMqtt/internal/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockmqtt is a mock of mqtt interface.
type Mockmqtt struct {
	ctrl     *gomock.Controller
	recorder *MockmqttMockRecorder
}

// MockmqttMockRecorder is the mock recorder for Mockmqtt.
type MockmqttMockRecorder struct {
	mock *Mockmqtt
}

// NewMockmqtt creates a new mock instance.
func NewMockmqtt(ctrl *gomock.Controller) *Mockmqtt {
	mock := &Mockmqtt{ctrl: ctrl}
	mock.recorder = &MockmqttMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmqtt) EXPECT() *MockmqttMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *Mockmqtt) SendMessage(topic, message string, retained bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", topic, message, retained)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockmqttMockRecorder) SendMessage(topic, message, retained any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*Mockmqtt)(nil).SendMessage), topic, message, retained)
}

// Subscribe mocks base method.
func (m *Mockmqtt) Subscribe(topic string) chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(chan string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockmqttMockRecorder) Subscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*Mockmqtt)(nil).Subscribe), topic)
}

// MockEntity is a mock of Entity interface.
type MockEntity struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMockRecorder
}

// MockEntityMockRecorder is the mock recorder for MockEntity.
type MockEntityMockRecorder struct {
	mock *MockEntity
}

// NewMockEntity creates a new mock instance.
func NewMockEntity(ctrl *gomock.Controller) *MockEntity {
	mock := &MockEntity{ctrl: ctrl}
	mock.recorder = &MockEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntity) EXPECT() *MockEntityMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockEntity) Consume(client dto.Client, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", client, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockEntityMockRecorder) Consume(client, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockEntity)(nil).Consume), client, message)
}

// GetCommandTopic mocks base method.
func (m *MockEntity) GetCommandTopic(client dto.Client) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandTopic", client)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCommandTopic indicates an expected call of GetCommandTopic.
func (mr *MockEntityMockRecorder) GetCommandTopic(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandTopic", reflect.TypeOf((*MockEntity)(nil).GetCommandTopic), client)
}

// GetState mocks base method.
func (m *MockEntity) GetState(client dto.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockEntityMockRecorder) GetState(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockEntity)(nil).GetState), client)
}

// GetStateTopic mocks base method.
func (m *MockEntity) GetStateTopic(client dto.Client) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateTopic", client)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStateTopic indicates an expected call of GetStateTopic.
func (mr *MockEntityMockRecorder) GetStateTopic(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateTopic", reflect.TypeOf((*MockEntity)(nil).GetStateTopic), client)
}

// SendDiscoveryMessage mocks base method.
func (m *MockEntity) SendDiscoveryMessage(client dto.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDiscoveryMessage", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDiscoveryMessage indicates an expected call of SendDiscoveryMessage.
func (mr *MockEntityMockRecorder) SendDiscoveryMessage(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDiscoveryMessage", reflect.TypeOf((*MockEntity)(nil).SendDiscoveryMessage), client)
}

// MockclientList is a mock of clientList interface.
type MockclientList struct {
	ctrl     *gomock.Controller
	recorder *MockclientListMockRecorder
}

// MockclientListMockRecorder is the mock recorder for MockclientList.
type MockclientListMockRecorder struct {
	mock *MockclientList
}

// NewMockclientList creates a new mock instance.
func NewMockclientList(ctrl *gomock.Controller) *MockclientList {
	mock := &MockclientList{ctrl: ctrl}
	mock.recorder = &MockclientListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientList) EXPECT() *MockclientListMockRecorder {
	return m.recorder
}

// GetClientList mocks base method.
func (m *MockclientList) GetClientList() ([]dto.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientList")
	ret0, _ := ret[0].([]dto.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientList indicates an expected call of GetClientList.
func (mr *MockclientListMockRecorder) GetClientList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientList", reflect.TypeOf((*MockclientList)(nil).GetClientList))
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *Mocklogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), varargs...)
}

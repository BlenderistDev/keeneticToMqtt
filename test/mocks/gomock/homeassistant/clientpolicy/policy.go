// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go
//
// Generated by this command:
//
//	mockgen -source=policy.go -destination=../../../test/mocks/gomock/homeassistant/clientpolicy/policy.go
//
// Package mock_clientpolicy is a generated GoMock package.
package mock_clientpolicy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockdiscovery is a mock of discovery interface.
type Mockdiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockdiscoveryMockRecorder
}

// MockdiscoveryMockRecorder is the mock recorder for Mockdiscovery.
type MockdiscoveryMockRecorder struct {
	mock *Mockdiscovery
}

// NewMockdiscovery creates a new mock instance.
func NewMockdiscovery(ctrl *gomock.Controller) *Mockdiscovery {
	mock := &Mockdiscovery{ctrl: ctrl}
	mock.recorder = &MockdiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdiscovery) EXPECT() *MockdiscoveryMockRecorder {
	return m.recorder
}

// SendDiscoverySelect mocks base method.
func (m *Mockdiscovery) SendDiscoverySelect(commandTopic, stateTopic, deviceName, name string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDiscoverySelect", commandTopic, stateTopic, deviceName, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDiscoverySelect indicates an expected call of SendDiscoverySelect.
func (mr *MockdiscoveryMockRecorder) SendDiscoverySelect(commandTopic, stateTopic, deviceName, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDiscoverySelect", reflect.TypeOf((*Mockdiscovery)(nil).SendDiscoverySelect), commandTopic, stateTopic, deviceName, name, options)
}

// MockaccessUpdate is a mock of accessUpdate interface.
type MockaccessUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockaccessUpdateMockRecorder
}

// MockaccessUpdateMockRecorder is the mock recorder for MockaccessUpdate.
type MockaccessUpdateMockRecorder struct {
	mock *MockaccessUpdate
}

// NewMockaccessUpdate creates a new mock instance.
func NewMockaccessUpdate(ctrl *gomock.Controller) *MockaccessUpdate {
	mock := &MockaccessUpdate{ctrl: ctrl}
	mock.recorder = &MockaccessUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccessUpdate) EXPECT() *MockaccessUpdateMockRecorder {
	return m.recorder
}

// SetPolicy mocks base method.
func (m *MockaccessUpdate) SetPolicy(mac, policy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPolicy", mac, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPolicy indicates an expected call of SetPolicy.
func (mr *MockaccessUpdateMockRecorder) SetPolicy(mac, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPolicy", reflect.TypeOf((*MockaccessUpdate)(nil).SetPolicy), mac, policy)
}

// Mockmqtt is a mock of mqtt interface.
type Mockmqtt struct {
	ctrl     *gomock.Controller
	recorder *MockmqttMockRecorder
}

// MockmqttMockRecorder is the mock recorder for Mockmqtt.
type MockmqttMockRecorder struct {
	mock *Mockmqtt
}

// NewMockmqtt creates a new mock instance.
func NewMockmqtt(ctrl *gomock.Controller) *Mockmqtt {
	mock := &Mockmqtt{ctrl: ctrl}
	mock.recorder = &MockmqttMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmqtt) EXPECT() *MockmqttMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *Mockmqtt) SendMessage(topic, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", topic, message)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockmqttMockRecorder) SendMessage(topic, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*Mockmqtt)(nil).SendMessage), topic, message)
}

// Subscribe mocks base method.
func (m *Mockmqtt) Subscribe(topic string) chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(chan string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockmqttMockRecorder) Subscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*Mockmqtt)(nil).Subscribe), topic)
}

// MockpolicyStorage is a mock of policyStorage interface.
type MockpolicyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockpolicyStorageMockRecorder
}

// MockpolicyStorageMockRecorder is the mock recorder for MockpolicyStorage.
type MockpolicyStorageMockRecorder struct {
	mock *MockpolicyStorage
}

// NewMockpolicyStorage creates a new mock instance.
func NewMockpolicyStorage(ctrl *gomock.Controller) *MockpolicyStorage {
	mock := &MockpolicyStorage{ctrl: ctrl}
	mock.recorder = &MockpolicyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpolicyStorage) EXPECT() *MockpolicyStorageMockRecorder {
	return m.recorder
}

// GetPolicyList mocks base method.
func (m *MockpolicyStorage) GetPolicyList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPolicyList indicates an expected call of GetPolicyList.
func (mr *MockpolicyStorageMockRecorder) GetPolicyList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyList", reflect.TypeOf((*MockpolicyStorage)(nil).GetPolicyList))
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: txbytes.go
//
// Generated by this command:
//
//	mockgen -source=txbytes.go -destination=../../../test/mocks/gomock/homeassistant/txbytes/txbytes.go
//
// Package mock_txbytes is a generated GoMock package.
package mock_txbytes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockdiscovery is a mock of discovery interface.
type Mockdiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockdiscoveryMockRecorder
}

// MockdiscoveryMockRecorder is the mock recorder for Mockdiscovery.
type MockdiscoveryMockRecorder struct {
	mock *Mockdiscovery
}

// NewMockdiscovery creates a new mock instance.
func NewMockdiscovery(ctrl *gomock.Controller) *Mockdiscovery {
	mock := &Mockdiscovery{ctrl: ctrl}
	mock.recorder = &MockdiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdiscovery) EXPECT() *MockdiscoveryMockRecorder {
	return m.recorder
}

// SendDiscoverySensor mocks base method.
func (m *Mockdiscovery) SendDiscoverySensor(stateTopic, deviceName, name, unit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDiscoverySensor", stateTopic, deviceName, name, unit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDiscoverySensor indicates an expected call of SendDiscoverySensor.
func (mr *MockdiscoveryMockRecorder) SendDiscoverySensor(stateTopic, deviceName, name, unit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDiscoverySensor", reflect.TypeOf((*Mockdiscovery)(nil).SendDiscoverySensor), stateTopic, deviceName, name, unit)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: discovery.go
//
// Generated by this command:
//
//	mockgen -source=discovery.go -destination=../../../test/mocks/gomock/services/discovery/discovery.go
//
// Package mock_discovery is a generated GoMock package.
package mock_discovery

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockmqttClient is a mock of mqttClient interface.
type MockmqttClient struct {
	ctrl     *gomock.Controller
	recorder *MockmqttClientMockRecorder
}

// MockmqttClientMockRecorder is the mock recorder for MockmqttClient.
type MockmqttClientMockRecorder struct {
	mock *MockmqttClient
}

// NewMockmqttClient creates a new mock instance.
func NewMockmqttClient(ctrl *gomock.Controller) *MockmqttClient {
	mock := &MockmqttClient{ctrl: ctrl}
	mock.recorder = &MockmqttClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmqttClient) EXPECT() *MockmqttClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockmqttClient) SendMessage(topic, message string, retained bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", topic, message, retained)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockmqttClientMockRecorder) SendMessage(topic, message, retained any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockmqttClient)(nil).SendMessage), topic, message, retained)
}
